# Generated by Django 4.0.6 on 2023-02-14 06:19

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('common', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ScraperConnection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(blank=True, max_length=450, null=True)),
                ('password', models.CharField(blank=True, max_length=450, null=True)),
                ('active', models.CharField(blank=True, max_length=5, null=True)),
                ('ad_platform', models.PositiveSmallIntegerField(blank=True, choices=[(0, 'SpotifyScraper'), (1, 'LinkfireScraper')], null=True)),
            ],
            options={
                'db_table': 'scraper_connection',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ScraperDowntime',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('scraper', models.CharField(blank=True, max_length=45, null=True)),
                ('offline_at', models.DateTimeField(blank=True, null=True)),
                ('back_online_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'scraper_downtime',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Settings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('variable', models.CharField(blank=True, max_length=95, null=True)),
                ('value', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'settings',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SpotifyProfiles',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('avatar_url', models.CharField(blank=True, max_length=450, null=True)),
                ('profile_id', models.CharField(blank=True, max_length=450, null=True)),
                ('profile_name', models.CharField(blank=True, max_length=95, null=True)),
                ('active', models.CharField(blank=True, max_length=45, null=True)),
                ('scraper_connection', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='spotify_profiles_scraper_connection', to='scraper.scraperconnection')),
                ('scraper_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='spotify_profiles_scraper_group', to='common.scrapergroup')),
            ],
            options={
                'db_table': 'spotify_profiles',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SpotifyPlaylistData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('playlist_listeners', models.IntegerField(blank=True, null=True)),
                ('playlist_streams', models.IntegerField(blank=True, null=True)),
                ('time_filter', models.CharField(blank=True, max_length=45, null=True)),
                ('date', models.DateField(blank=True, null=True)),
                ('date_scraped', models.DateTimeField(blank=True, null=True)),
                ('playlist_followers', models.IntegerField(blank=True, null=True)),
                ('scraper_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='spotify_playlist_data_scraper_group', to='common.scrapergroup')),
                ('spotify_profile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='spotify_playlist_data_scraper_group', to='scraper.spotifyprofiles')),
            ],
            options={
                'db_table': 'spotify_playlist_data',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SpotifyPayoutData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('dsp', models.CharField(blank=True, max_length=45, null=True)),
                ('country', models.CharField(blank=True, max_length=450, null=True)),
                ('dollar_per_mil', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('date_statement', models.DateTimeField(blank=True, null=True)),
                ('date_imported', models.DateTimeField(blank=True, null=True)),
                ('scraper_connection', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='spotify_payout_data_scraper_connection', to='scraper.scraperconnection')),
            ],
            options={
                'db_table': 'spotify_payout_data',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Spotify7DaysData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('country', models.CharField(blank=True, max_length=95, null=True)),
                ('listeners', models.IntegerField(blank=True, null=True)),
                ('streams', models.IntegerField(blank=True, null=True)),
                ('followers', models.IntegerField(blank=True, null=True)),
                ('date', models.DateField(blank=True, null=True)),
                ('date_scraped', models.DateTimeField(blank=True, null=True)),
                ('scraper_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='spotify_7days_data_scraper_group', to='common.scrapergroup')),
                ('spotify_profile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='spotify_7days_data_scraper_group', to='scraper.spotifyprofiles')),
            ],
            options={
                'db_table': 'spotify_7days_data',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Spotify28DaysData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('country', models.CharField(blank=True, max_length=95, null=True)),
                ('listeners', models.IntegerField(blank=True, null=True)),
                ('streams', models.IntegerField(blank=True, null=True)),
                ('followers', models.IntegerField(blank=True, null=True)),
                ('date', models.DateField(blank=True, null=True)),
                ('date_scraped', models.DateTimeField(blank=True, null=True)),
                ('scraper_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='spotify_28days_data_scraper_group', to='common.scrapergroup')),
                ('spotify_profile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='spotify_28days_data_scraper_group', to='scraper.spotifyprofiles')),
            ],
            options={
                'db_table': 'spotify_28days_data',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Spotify1DayData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('country', models.CharField(blank=True, max_length=95, null=True)),
                ('listeners', models.IntegerField(blank=True, null=True)),
                ('streams', models.IntegerField(blank=True, null=True)),
                ('followers', models.IntegerField(blank=True, null=True)),
                ('date', models.DateTimeField(blank=True, null=True)),
                ('date_scraped', models.DateTimeField(blank=True, null=True)),
                ('scraper_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='spotify_1day_data_scraper_group', to='common.scrapergroup')),
                ('spotify_profile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='spotify_1day_data_scraper_group', to='scraper.spotifyprofiles')),
            ],
            options={
                'db_table': 'spotify_1day_data',
                'managed': True,
            },
        ),
    ]
