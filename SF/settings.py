"""
Django settings for SF project.
Generated by 'django-admin startproject' using Django 4.0.6.
For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import environ
from pathlib import Path
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration
import os

os.environ["XDG_RUNTIME_DIR"] = "/tmp/runtime-root"

env = environ.Env()
environ.Env.read_env()

ENV = env.str("ENV", default="local")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-(x*=(z9vxgzj2ob_lg$z8()e(jvbrvh+mzgrc$r6ak*onuqd&t"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DEBUG", default=False)

ALLOWED_HOSTS = [
    "api.fruitsagency.com",
    "api.everywhere-ai.com",
    "devapi.everywhere-ai.com",
    "*.stripe.com",
]

"""
This code defines three lists of apps: SHARED_APPS, TENANT_APPS, and INSTALLED_APPS.
SHARED_APPS and TENANT_APPS contain a list of Django apps that are either shared among all tenants or specific to a tenant.
INSTALLED_APPS is a combination of SHARED_APPS and TENANT_APPS, with any duplicate apps removed.
This allows the tenant-specific apps to be installed in addition to the shared apps.
"""

# Application definition
SHARED_APPS = [
    "apps.main",
    "apps.marketplace",
    "apps.payment",
    "rest_framework.authtoken",
    "django_tenants",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

TENANT_APPS = [
    "apps.accounts",
    "apps.common",
    "apps.error_notifications",
    "apps.facebook",
    "apps.linkfire",
    "apps.scraper",
    "apps.snapchat",
    "apps.tiktok",
    "apps.Google",
]

INSTALLED_APPS = (
    list(SHARED_APPS)
    + [app for app in TENANT_APPS if app not in SHARED_APPS]
    + ["rest_framework", "corsheaders"]
)


MIDDLEWARE = [
    "apps.main.middleware.RequestIDTenantMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "SF.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "SF.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases
DATABASES = {
    "default": {
        "ENGINE": "django_tenants.postgresql_backend",
        "NAME": env.str("DB_NAME"),
        "USER": env.str("DB_USER"),
        "PASSWORD": env.str("DB_PASSWORD"),
        "HOST": env.str("DB_HOST"),
        "PORT": "5432",
    }
}

print(DATABASES)

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Celery stuff
CELERY_ACCEPT_CONTENT = ["application/json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_IMPORTS = ("SF.tasks", "apps.common.sendgrid")
CELERY_BROKER_URL = env.str("CELERY_BROKER_URL")
CELERY_RESULT_BACKEND = env.str("CELERY_RESULT_BACKEND")
CELERY_ENABLE_UTC = False

# set User models as a auth model
AUTH_USER_MODEL = "main.User"
AUTHENTICATION_BACKENDS = (("django.contrib.auth.backends.ModelBackend"),)
REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 20,
}

# Tenant stuff
SHOW_PUBLIC_IF_NO_TENANT_FOUND = True
DATABASE_ROUTERS = ("django_tenants.routers.TenantSyncRouter",)
TENANT_MODEL = "main.Company"  # app.Model
TENANT_DOMAIN_MODEL = "main.Domain"  # app.Model
# PUBLIC_SCHEMA_URLCONF = "SF.urls_public"


CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": "redis://redis:6379",
        "KEY_PREFIX": "",
    }
}

CORS_ALLOW_HEADERS = ["*"]
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True

INVITE_USER_PASSWORD_LENGTH = 10

if ENV == "production":
    # Google Login
    GOOGLE_CLIENT_ID = env.str("GOOGLE_CLIENT_ID")
    GOOGLE_CLIENT_SECRET = env.str("GOOGLE_CLIENT_SECRET")

    # Sendgrid
    SENDGRID_API_KEY = env.str("SENDGRID_API_KEY")
    FROM_EMAIL = env.str("FROM_EMAIL")
    INVITE_USER_TEMPLATE_ID = env.str("INVITE_USER_TEMPLATE_ID")
    FORGOT_PASSWORD_TEMPLATE_ID = env.str("FORGOT_PASSWORD_TEMPLATE_ID")

    # Forgot Password
    PASSWORD_RESET_TIMEOUT = 30 * 60  # in seconds

    # client
    TIKTOK_SECRET_ID = env.str("TIKTOK_SECRET_ID")
    TIKTOK_APP_ID = env.str("TIKTOK_APP_ID")

    FACEBOOK_SECRET_ID = env.str("FACEBOOK_SECRET_ID")
    FACEBOOK_APP_ID = env.str("FACEBOOK_APP_ID")

    MP_FACEBOOK_SECRET_ID = env.str("MP_FACEBOOK_SECRET_ID")
    MP_FACEBOOK_APP_ID = env.str("MP_FACEBOOK_APP_ID")

    MP_TIKTOK_SECRET_ID = env.str("MP_TIKTOK_SECRET_ID")
    MP_TIKTOK_APP_ID = env.str("MP_TIKTOK_APP_ID")

    SNAPCHAT_CLIENT_SECRET_ID = env.str("SNAPCHAT_CLIENT_SECRET_ID")
    SNAPCHAT_CLIENT_ID = env.str("SNAPCHAT_CLIENT_ID")

    AWS_REGION_NAME = env.str("AWS_REGION_NAME")
    AWS_ACCESS_KEY = env.str("AWS_ACCESS_KEY")
    AWS_SECRET_KEY = env.str("AWS_SECRET_KEY")
    AWS_BUCKET_NAME = env.str("AWS_BUCKET_NAME")

    REGISTRATION_EMAIL_VERIFICATION_TEMPLATE_ID = env.str(
        "REGISTRATION_EMAIL_VERIFICATION_TEMPLATE_ID"
    )
    APPROVAL_STATUS_TEMPLATE_ID = env.str("APPROVAL_STATUS_TEMPLATE_ID")
    SOCIAL_POST_LINK_TEMPLATE_ID = env.str("SOCIAL_POST_LINK_TEMPLATE_ID")
    APPROVED_STATUS_TEMPLATE_ID = env.str("APPROVED_STATUS_TEMPLATE_ID")
    ACCEPTED_STATUS_TEMPLATE_ID = env.str("ACCEPTED_STATUS_TEMPLATE_ID")
    DECLINED_STATUS_TEMPLATE_ID = env.str("DECLINED_STATUS_TEMPLATE_ID")
    UPLOAD_CONTENT_TEMPLATE_ID = env.str("UPLOAD_CONTENT_TEMPLATE_ID")
    MILESTONE_REACHED_TEMPLATE_ID = env.str("MILESTONE_REACHED_TEMPLATE_ID")
    ENTERPRISE_EMAIL_NOTIFICATION_ID = env.str("ENTERPRISE_EMAIL_NOTIFICATION_ID")
    VDOCIPHER_API_SECRET_KEY = env.str("VDOCIPER_API_SECRET_KEY")

    STRIPE_SECRET_KEY = env.str("STRIPE_SECRET_KEY")
    STRIPE_PUBLISHABLE_KEY = env.str("STRIPE_PUBLISHABLE_KEY")
    FREE_TRIAL_PLAN_ID = env.str("FREE_TRIAL_PLAN_ID")
    STRIPE_ENDPOINT_SECRET = env.str("STRIPE_ENDPOINT_SECRET")
    FREE_TRIAL_REMINDER_TEMPLATE_ID = env.str("FREE_TRIAL_REMINDER_TEMPLATE_ID")
    EXCHANGE_RATE_API_KEY = env.str("EXCHANGE_RATE_API_KEY")

    ENTERPRISE_ADMIN_EMAIL = env.str("ENTERPRISE_ADMIN_EMAIL")
    ADSPEND_LIMIT_EXCEEDED_TEMPLATE_ID = env.str("ADSPEND_LIMIT_EXCEEDED_TEMPLATE_ID")

else:
    # Google Login
    GOOGLE_CLIENT_ID = env.str("GOOGLE_CLIENT_ID")
    GOOGLE_CLIENT_SECRET = env.str("GOOGLE_CLIENT_SECRET")

    # FaceBook Login
    FACEBOOK_MYAPP_ID = env.str("FACEBOOK_MYAPP_ID")
    FACEBOOK_MYSECRET = env.str("FACEBOOK_MYSECRET")

    # Sendgrid
    SENDGRID_API_KEY = env.str("SENDGRID_API_KEY")
    FROM_EMAIL = env.str("FROM_EMAIL")
    INVITE_USER_TEMPLATE_ID = env.str("INVITE_USER_TEMPLATE_ID")
    FORGOT_PASSWORD_TEMPLATE_ID = env.str("FORGOT_PASSWORD_TEMPLATE_ID")
    SOCIAL_POST_LINK_TEMPLATE_ID = env.str("SOCIAL_POST_LINK_TEMPLATE_ID")
    APPROVED_STATUS_TEMPLATE_ID = env.str("APPROVED_STATUS_TEMPLATE_ID")
    ACCEPTED_STATUS_TEMPLATE_ID = env.str("ACCEPTED_STATUS_TEMPLATE_ID")
    DECLINED_STATUS_TEMPLATE_ID = env.str("DECLINED_STATUS_TEMPLATE_ID")
    UPLOAD_CONTENT_TEMPLATE_ID = env.str("UPLOAD_CONTENT_TEMPLATE_ID")
    MILESTONE_REACHED_TEMPLATE_ID = env.str("MILESTONE_REACHED_TEMPLATE_ID")
    ENTERPRISE_EMAIL_NOTIFICATION_ID = env.str("ENTERPRISE_EMAIL_NOTIFICATION_ID")

    # Forgot Password
    PASSWORD_RESET_TIMEOUT = 30 * 60  # in seconds

    # client
    TIKTOK_SECRET_ID = env.str("TIKTOK_SECRET_ID")
    TIKTOK_APP_ID = env.str("TIKTOK_APP_ID")

    FACEBOOK_SECRET_ID = env.str("FACEBOOK_SECRET_ID")
    FACEBOOK_APP_ID = env.str("FACEBOOK_APP_ID")

    MP_FACEBOOK_SECRET_ID = env.str("MP_FACEBOOK_SECRET_ID")
    MP_FACEBOOK_APP_ID = env.str("MP_FACEBOOK_APP_ID")

    MP_TIKTOK_SECRET_ID = env.str("MP_TIKTOK_SECRET_ID")
    MP_TIKTOK_APP_ID = env.str("MP_TIKTOK_APP_ID")

    SNAPCHAT_CLIENT_SECRET_ID = env.str("SNAPCHAT_CLIENT_SECRET_ID")
    SNAPCHAT_CLIENT_ID = env.str("SNAPCHAT_CLIENT_ID")

    AWS_REGION_NAME = env.str("AWS_REGION_NAME")
    AWS_ACCESS_KEY = env.str("AWS_ACCESS_KEY")
    AWS_SECRET_KEY = env.str("AWS_SECRET_KEY")
    AWS_BUCKET_NAME = env.str("AWS_BUCKET_NAME")
    VDOCIPHER_API_SECRET_KEY = env.str("VDOCIPER_API_SECRET_KEY")

    REGISTRATION_EMAIL_VERIFICATION_TEMPLATE_ID = env.str(
        "REGISTRATION_EMAIL_VERIFICATION_TEMPLATE_ID"
    )
    APPROVAL_STATUS_TEMPLATE_ID = env.str("APPROVAL_STATUS_TEMPLATE_ID")

    STRIPE_SECRET_KEY = env.str("STRIPE_SECRET_KEY")
    STRIPE_PUBLISHABLE_KEY = env.str("STRIPE_PUBLISHABLE_KEY")
    FREE_TRIAL_PLAN_ID = env.str("FREE_TRIAL_PLAN_ID")
    STRIPE_ENDPOINT_SECRET = env.str("STRIPE_ENDPOINT_SECRET")
    FREE_TRIAL_REMINDER_TEMPLATE_ID = env.str("FREE_TRIAL_REMINDER_TEMPLATE_ID")
    EXCHANGE_RATE_API_KEY = env.str("EXCHANGE_RATE_API_KEY")
    ENTERPRISE_ADMIN_EMAIL = env.str("ENTERPRISE_ADMIN_EMAIL")
    ADSPEND_LIMIT_EXCEEDED_TEMPLATE_ID = env.str("ADSPEND_LIMIT_EXCEEDED_TEMPLATE_ID")
sentry_sdk.init(
    dsn="https://2378b8cd9d0948aa9edf1bde17f1b7f9@o4504490001498112.ingest.sentry.io/4504490003595264",
    integrations=[
        DjangoIntegration(),
    ],
    # Set traces_sample_rate to 1.0 to capture 100%
    # of transactions for performance monitoring.
    # We recommend adjusting this value in production.
    traces_sample_rate=1.0,
    # If you wish to associate users to errors (assuming you are using
    # django.contrib.auth) you may enable sending PII data.
    send_default_pii=True,
)
